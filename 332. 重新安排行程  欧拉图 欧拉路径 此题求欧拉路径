class Solution:
    def findItinerary(self, tickets: List[List[str]]) -> List[str]:
        def dfs(curnode):
            while vec[curnode]:
                tmp = heapq.heappop(vec[curnode])
                dfs(tmp)
            stack.append(curnode)
            
        vec = collections.defaultdict(list)
        for start,arrive in tickets:
            vec[start].append(arrive)

        for key in vec:
            heapq.heapify(vec[key])

        stack = list()
        dfs('JFK')
        return stack[::-1]
# 欧拉路径 使用 hierholzer 方法 
#该方法必须从奇数点进行深度遍历,当节点没有其他路可以走的时候入栈
# 最后倒序输出 栈内元素, 则为从开始 节点的 欧拉路径 
#顺序输出也是欧拉路径 不过此时 开始节点 为终点.


#PS
#               欧拉图                         欧拉路径 
#有向图 入度和出度相等        只有一个点 出度-入度=1 另一点 入度-出度=1
#无向图 都为偶数条边            只有两个点 是奇数条边
