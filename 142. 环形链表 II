# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head):
        #快慢指针 判断链表中是否有环
        fast = slow = head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            if slow == fast:
                pre = head
                while pre != slow:
                    pre = pre.next
                    slow = slow.next
                return pre

#本题在 入环之前距离设为x 当慢节点到达入环口，快指针移到2x 此时距离入环口已有 y 长  剩余 z长 z+y = 环长

#当慢指针走到 z时 快指针到 2z+y 慢指针到z 快慢指针相遇 
#此时 头指针和 相遇指针 离入环口 都 有y 长。
