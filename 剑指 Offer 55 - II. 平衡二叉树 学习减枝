# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
        def helper(node):
            if not node: return 0
            return max(helper(node.left),helper(node.right))+1
        if not root: return True
        return abs(helper(root.left)-helper(root.right))<=1 and self.isBalanced(root.left) and self.isBalanced(root.right)
#普通做法 获取左右子树的深度 比较两者之间绝对值差是否小于1 80ms


#剪枝
#当子树不是平衡树时候  根节点也不是 所以一旦有一个 -1 就能返回
class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
        def helper(node):
            if not node: return 0
            left = helper(node.left)
            if left ==-1 : return -1
            right = helper(node.right)
            if right == -1 : return -1
            return max(left,right)+1 if abs(left-right)<=1 else -1
        return helper(root)!=-1
        
#剪枝可以快一倍 56ms  
