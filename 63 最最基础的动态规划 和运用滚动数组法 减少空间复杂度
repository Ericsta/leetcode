class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        
        if obstacleGrid[0][0]==1:
            return 0
        m,n = len(obstacleGrid),len(obstacleGrid[0])
        dp = [[0 for _ in range(n)] for _ in range(m)]
        dp[0][0] = 1
        for i in range(1,n):
            if obstacleGrid[0][i]==0:
                dp[0][i]=dp[0][i-1]
        for i in range(1,m):
            if obstacleGrid[i][0]==0:
                print(i)
                dp[i][0]=dp[i-1][0]
            print(dp)

        for i in range(1,m):
            for j in range(1,n):
                
                if obstacleGrid[i][j]==1:
                    dp[i][j]=0
                else:
                    dp[i][j]=dp[i-1][j]+dp[i][j-1]
        return dp[m-1][n-1]






#滚动数组法


class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        #滚动数组 只需要保存一行数据即可 
        
        m,n = len(obstacleGrid),len(obstacleGrid[0])
        dp = [0 for i in range(n)]
        dp[0] = 1 if obstacleGrid[0][0] == 0 else 0
        for i in range(m):
            for j in range(n):
                if obstacleGrid[i][j]==1:
                    dp[j]=0
                    continue
                if j-1>=0 and obstacleGrid[i][j-1]==0:
                #不在第一列 且 位置没有阻拦
                    dp[j]+=dp[j-1]
        return dp[n-1]



